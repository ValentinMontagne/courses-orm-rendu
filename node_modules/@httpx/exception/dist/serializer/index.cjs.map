{"version":3,"sources":["../../src/serializer/error/SerializerError.ts","../../src/serializer/typeguard/isBaseHttpException.ts","../../src/serializer/typeguard/isNativeError.ts","../../src/serializer/mapper/convertToSerializable.ts","../../src/serializer/mapper/createFromSerializable.ts","../../src/serializer/json/fromJson.ts","../../src/serializer/json/toJson.ts"],"names":["SerializerError","_SerializerError","message","params","cause","supportsErrorCause","baseExceptionMap","HttpClientException","HttpException","HttpServerException","isBaseHttpException","name","nativeErrorMap","nativeErrors","isNativeError","error","e","convertToSerializable","includeStack","c","stack","common","isHttpException","HttpUnprocessableEntity","createCustomError","serializable","cls","createFromSerializable","createHttpExceptionError","statusCode","code","errorId","method","url","issues","exceptionParams","createHttpException","payload","fromJson","json","v","toJson","exception"],"mappings":"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","sourcesContent":["import { supportsErrorCause } from '../../support/supportsErrorCause';\n\nexport class SerializerError extends Error {\n  constructor(\n    message: string,\n    params?: {\n      cause?: Error;\n    }\n  ) {\n    const { cause } = params ?? {};\n    super(message);\n    if (supportsErrorCause() && cause instanceof Error) {\n      this.cause = cause;\n    }\n    Object.setPrototypeOf(this, SerializerError.prototype);\n    this.name = 'SerializerError';\n  }\n}\n","import { HttpClientException } from '../../base/HttpClientException';\nimport { HttpException } from '../../base/HttpException';\nimport { HttpServerException } from '../../base/HttpServerException';\n\nexport const baseExceptionMap = {\n  HttpClientException: HttpClientException,\n  HttpException: HttpException,\n  HttpServerException: HttpServerException,\n};\n\n/**\n * Whether the provided name is one of HttpException, HttpClientException, HttpServerException\n */\nexport const isBaseHttpException = (\n  name: string\n): name is keyof typeof baseExceptionMap => {\n  return Object.keys(baseExceptionMap).includes(name);\n};\n","/**\n * Native ecmascript errors\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types\n * @see https://262.ecma-international.org/12.0/#sec-well-known-intrinsic-objects\n */\nimport type { NativeError } from '../types';\n\nexport const nativeErrorMap = {\n  Error: Error,\n  EvalError: EvalError,\n  RangeError: RangeError,\n  ReferenceError: ReferenceError,\n  SyntaxError: SyntaxError,\n  TypeError: TypeError,\n  UriError: URIError,\n};\n\nexport const nativeErrors = Object.values(nativeErrorMap);\n\nexport const isNativeError = (error: Error): error is NativeError => {\n  if (!((error as unknown) instanceof Error)) {\n    return false;\n  }\n  for (const e of nativeErrors) {\n    if (error.name === e.name) {\n      return true;\n    }\n  }\n  return false;\n};\n","import type { HttpException } from '../../base';\nimport { HttpUnprocessableEntity } from '../../client/HttpUnprocessableEntity';\nimport { isHttpException } from '../../typeguards/isHttpException';\nimport { isNativeError } from '../typeguard';\nimport type { NativeError, Serializable, SerializerParams } from '../types';\n\n/**\n * Convert an Error, NativeError or any HttpException to\n * an object suitable for serialization (a serializable version).\n *\n * @link {createFromSerializable}\n */\nexport const convertToSerializable = (\n  e: Error | HttpException | NativeError,\n  params?: SerializerParams\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n): Serializable => {\n  const { includeStack = false } = params ?? {};\n  const {\n    cause: c = null,\n    message,\n    name,\n    stack = null,\n  } = (\n    (e as unknown) instanceof Error\n      ? e\n      : {\n          message:\n            typeof (e as unknown) === 'string'\n              ? e\n              : `Can't serialize error at runtime. Received '${typeof e}'`,\n          name: 'Error',\n        }\n  ) as Error;\n  const cause = c instanceof Error ? convertToSerializable(c) : null;\n  const common = {\n    message,\n    name,\n    ...(includeStack && stack ? { stack } : {}),\n    ...(cause ? { cause } : {}),\n  };\n  if (isHttpException(e)) {\n    return {\n      __type: 'HttpException',\n      ...common,\n      statusCode: e.statusCode,\n      ...(e.url ? { url: e.url } : {}),\n      ...(e.code ? { code: e.code } : {}),\n      ...(e.method ? { method: e.method } : {}),\n      ...(e.errorId ? { errorId: e.errorId } : {}),\n      ...(e instanceof HttpUnprocessableEntity ? { issues: e.issues } : {}),\n    };\n  }\n  return {\n    __type: isNativeError(e) ? 'NativeError' : 'NonNativeError',\n    ...common,\n  };\n};\n","import type { HttpException } from '../../base';\nimport { createHttpException } from '../../factory/createHttpException';\nimport type { HttpExceptionParamsWithIssues } from '../../types/HttpExceptionParamsWithIssues';\nimport {\n  baseExceptionMap,\n  isBaseHttpException,\n  nativeErrorMap,\n} from '../typeguard';\nimport type {\n  NativeError,\n  Serializable,\n  SerializableError,\n  SerializableHttpException,\n  SerializableNonNativeError,\n  SerializerParams,\n} from '../types';\n\nconst createCustomError = (\n  serializable: Omit<SerializableError | SerializableNonNativeError, '__type'>,\n  params?: SerializerParams\n): Error | NativeError => {\n  const { includeStack = false } = params ?? {};\n  const { cause, message, name, stack } = serializable;\n  const cls = nativeErrorMap[name as keyof typeof nativeErrorMap] ?? Error;\n  const e: Error | NativeError = cause\n    ? new cls(message, {\n        cause: createFromSerializable(cause, params),\n      })\n    : new cls(message);\n  if (!includeStack) {\n    e.stack = undefined;\n  } else if (stack) {\n    e.stack = stack;\n  }\n  return e;\n};\n\nconst createHttpExceptionError = (\n  serializable: SerializableHttpException,\n  params?: SerializerParams\n): Error | HttpException => {\n  const { includeStack = false } = params ?? {};\n  const {\n    cause,\n    name,\n    stack,\n    statusCode,\n    code,\n    errorId,\n    message,\n    method,\n    url,\n    issues,\n  } = serializable;\n  const exceptionParams = {\n    cause: cause ? createFromSerializable(cause) : undefined,\n    code: code,\n    errorId: errorId,\n    message: message,\n    method: method,\n    url: url,\n    ...(issues ? { issues } : {}),\n  } satisfies HttpExceptionParamsWithIssues;\n  let e: HttpException;\n  try {\n    e = isBaseHttpException(name)\n      ? new baseExceptionMap[name](statusCode, exceptionParams)\n      : createHttpException(statusCode, exceptionParams);\n  } catch {\n    return createCustomError({\n      cause,\n      message: exceptionParams.message,\n      name,\n      stack,\n    });\n  }\n  if (!includeStack) {\n    e.stack = undefined;\n  } else if (stack !== undefined) {\n    e.stack = stack;\n  }\n  return e;\n};\n\n/**\n * create an Error, NativeError or any HttpException from a\n * serializable representation\n *\n * @link {convertToSerializable}\n */\nexport const createFromSerializable = (\n  payload: Serializable,\n  params?: SerializerParams\n): Error | HttpException | NativeError => {\n  let e: Error | HttpException | NativeError;\n  switch (payload.__type) {\n    case 'HttpException': {\n      e = createHttpExceptionError(payload, params);\n      break;\n    }\n    case 'NativeError':\n    case 'NonNativeError': {\n      e = createCustomError(payload, params);\n      break;\n    }\n    default: {\n      throw new Error(\n        `Can't unserialize from unknown error (${\n          (payload as Serializable).name\n        })`\n      );\n    }\n  }\n  return e;\n};\n","import type { HttpException } from '../../base';\nimport { SerializerError } from '../error/SerializerError';\nimport { createFromSerializable } from '../mapper';\nimport type { SerializableError, SerializerParams } from '../types';\n\nexport const fromJson = (\n  json: string,\n  params?: SerializerParams\n): Error | HttpException | SerializerError => {\n  let v: SerializableError;\n  try {\n    v = JSON.parse(json ?? '') as unknown as SerializableError;\n  } catch (e) {\n    return new SerializerError(`Can't parse json`, {\n      ...(e instanceof Error ? { cause: e } : {}),\n    });\n  }\n  return createFromSerializable(v, params);\n};\n","import type { HttpException } from '../../base';\nimport { SerializerError } from '../error/SerializerError';\nimport { convertToSerializable } from '../mapper';\nimport type { NativeError, SerializerParams } from '../types';\n\nexport const toJson = (\n  exception: Error | HttpException | NativeError,\n  params?: SerializerParams\n): string => {\n  const serializable = convertToSerializable(exception, params);\n  let v: string;\n  try {\n    v = JSON.stringify(serializable);\n  } catch (e) {\n    throw new SerializerError(`Can't encode into json`, {\n      ...(e instanceof Error ? { cause: e } : {}),\n    });\n  }\n  return v;\n};\n"]}