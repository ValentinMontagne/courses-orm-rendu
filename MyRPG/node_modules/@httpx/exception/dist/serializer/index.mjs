import { a as a$1 } from '../chunk-BBYSVIV3.mjs';
import { a, D, T, c as c$1, b, d } from '../chunk-KVOU7TFQ.mjs';

var c=class r extends Error{constructor(t,o){let{cause:e}=o??{};super(t),a()&&e instanceof Error&&(this.cause=e),Object.setPrototypeOf(this,r.prototype),this.name="SerializerError";}};var f={HttpClientException:c$1,HttpException:b,HttpServerException:d},S=r=>Object.keys(f).includes(r);var u={Error,EvalError,RangeError,ReferenceError,SyntaxError,TypeError,UriError:URIError},I=Object.values(u),z=r=>{if(!(r instanceof Error))return !1;for(let t of I)if(r.name===t.name)return !0;return !1};var l=(r,t)=>{let{includeStack:o=!1}=t??{},{cause:e=null,message:i,name:n,stack:a=null}=r instanceof Error?r:{message:typeof r=="string"?r:`Can't serialize error at runtime. Received '${typeof r}'`,name:"Error"},p=e instanceof Error?l(e):null,s={message:i,name:n,...o&&a?{stack:a}:{},...p?{cause:p}:{}};return a$1(r)?{__type:"HttpException",...s,statusCode:r.statusCode,...r.url?{url:r.url}:{},...r.code?{code:r.code}:{},...r.method?{method:r.method}:{},...r.errorId?{errorId:r.errorId}:{},...r instanceof D?{issues:r.issues}:{}}:{__type:z(r)?"NativeError":"NonNativeError",...s}};var g=(r,t)=>{let{includeStack:o=!1}=t??{},{cause:e,message:i,name:n,stack:a}=r,p=u[n]??Error,s=e?new p(i,{cause:E(e,t)}):new p(i);return o?a&&(s.stack=a):s.stack=void 0,s},M=(r,t)=>{let{includeStack:o=!1}=t??{},{cause:e,name:i,stack:n,statusCode:a,code:p,errorId:s,message:P,method:w,url:C,issues:b}=r,x={cause:e?E(e):void 0,code:p,errorId:s,message:P,method:w,url:C,...b?{issues:b}:{}},m;try{m=S(i)?new f[i](a,x):T(a,x);}catch{return g({cause:e,message:x.message,name:i,stack:n})}return o?n!==void 0&&(m.stack=n):m.stack=void 0,m},E=(r,t)=>{let o;switch(r.__type){case"HttpException":{o=M(r,t);break}case"NativeError":case"NonNativeError":{o=g(r,t);break}default:throw new Error(`Can't unserialize from unknown error (${r.name})`)}return o};var O=(r,t)=>{let o;try{o=JSON.parse(r??"");}catch(e){return new c("Can't parse json",{...e instanceof Error?{cause:e}:{}})}return E(o,t)};var _=(r,t)=>{let o=l(r,t),e;try{e=JSON.stringify(o);}catch(i){throw new c("Can't encode into json",{...i instanceof Error?{cause:i}:{}})}return e};

export { c as SerializerError, l as convertToSerializable, E as createFromSerializable, O as fromJson, _ as toJson };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.mjs.map