{"version":3,"sources":["../../src/experimental/tryOrFail.ts"],"names":["tryOrFail","fn","e","HttpException","statusCode","cause","isObjectWithErrorStatusCode","HttpInternalServerError","isErrorWithErrorStatusCode","createHttpException"],"mappings":"yGAQO,IAAMA,EAAY,MACvBC,GAEOA,EAAG,EAAE,MAAOC,GAAM,CACvB,GAAIA,aAAaC,EACf,MAAMD,EAER,GAAM,CAAE,WAAAE,EAAY,MAAAC,CAAM,EAAI,CAC5B,WAAYC,EAA4BJ,CAAC,EACrCA,EAAE,WACFK,EAAwB,OAC5B,GAAIC,EAA2BN,CAAC,EAC5B,CACE,MAAOA,CACT,EACA,CAAC,CACP,EACA,MAAMO,EAAoBL,EAAY,CACpC,QAASF,aAAa,OAASA,EAAE,UAAY,GAAKA,EAAE,QAAU,OAC9D,MAAAG,CACF,CAAC,CACH,CAAC","sourcesContent":["import { HttpException } from '../base/HttpException';\nimport { createHttpException } from '../factory/createHttpException';\nimport { HttpInternalServerError } from '../server/HttpInternalServerError';\nimport { isErrorWithErrorStatusCode } from '../typeguards/isErrorWithErrorStatusCode';\nimport { isObjectWithErrorStatusCode } from '../typeguards/isObjectWithErrorStatusCode';\n\ntype AsyncFn<A extends unknown[], O> = (...args: A) => Promise<O>;\n\nexport const tryOrFail = async <T extends AsyncFn<unknown[], unknown>>(\n  fn: T\n): Promise<ReturnType<T>> => {\n  return fn().catch((e) => {\n    if (e instanceof HttpException) {\n      throw e;\n    }\n    const { statusCode, cause } = {\n      statusCode: isObjectWithErrorStatusCode(e)\n        ? e.statusCode\n        : HttpInternalServerError.STATUS,\n      ...(isErrorWithErrorStatusCode(e)\n        ? {\n            cause: e,\n          }\n        : {}),\n    };\n    throw createHttpException(statusCode, {\n      message: e instanceof Error && e.message !== '' ? e.message : undefined,\n      cause,\n    });\n  }) as Awaited<ReturnType<T>>;\n};\n"]}